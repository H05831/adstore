// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum Category {
  WOMEN
  MEN
  CHILDREN
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PAID
  UNPAID
  PENDING
  FAILED
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            UserRole          @default(USER)
  accounts        Account[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  orders          Order[]
  shippingAddress ShippingAddress[]
  BillingAddress  BillingAddress[]
  Review          Review[]
  Wishlist        Wishlist[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  description   String?
  price         Float?
  images        String[]
  colors        String[]
  sizes         String[]
  isInStock     Boolean?        @default(true)
  category      Category?
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?       @updatedAt
  Review        Review[]
  WishlistItems WishlistItems[]
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  reviewText String
  rating     String
  creator    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id])
  productId  String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Wishlist {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  userId        String          @db.ObjectId
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  WishlistItems WishlistItems[]
}

model WishlistItems {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  wishlistId String   @db.ObjectId
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  productId  String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id])
  addedAt    DateTime @default(now())

  @@unique([wishlistId, productId])
}

model Order {
  id                    String           @id @default(auto()) @map("_id") @db.ObjectId
  totalAmount           Float
  orderStatus           OrderStatus      @default(PENDING)
  paymentStatus         PaymentStatus    @default(UNPAID)
  isPaid                Boolean          @default(false)
  shippingMethod        String
  user                  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String           @db.ObjectId
  OrderItem             OrderItem[]
  shippingAddressId     String?          @db.ObjectId
  shippingAddress       ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  billingAddress        BillingAddress?  @relation(fields: [billingAddressId], references: [id])
  billingAddressId      String?          @db.ObjectId
  sameAsShippingAddress Boolean?         @default(false)
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  productId String @db.ObjectId
  name      String
  image     String
  quantity  Int
  price     Float
  orderId   String @db.ObjectId
  order     Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model ShippingAddress {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  fullName          String
  emailAddress      String
  confirmationEmail String
  phoneNumber       String
  streetName        String
  houseNumber       String
  city              String
  postalCode        String
  shippingCountry   String
  orders            Order[]
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BillingAddress {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  fullName          String
  emailAddress      String
  confirmationEmail String
  phoneNumber       String
  streetName        String
  houseNumber       String
  city              String
  postalCode        String
  shippingCountry   String
  orders            Order[]
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
